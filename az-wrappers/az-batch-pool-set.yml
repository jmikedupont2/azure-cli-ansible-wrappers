

 - name: Set input params for az_batch_pool_set
   set_fact: 
     az_batch_pool_set:
       input: 
         ###  Required parameter. The ID of the pool to update.  ### 
        'pool-id': "{{ item['pool-id'] | default('') }}" 
         ###  Optional parameter. A file containing the pool patch parameter specification in JSON format. If this parameter is specified, all 'Pool Arguments' are ignored.  ### 
        'json-file': "{{ item['json-file'] | default('') }}" 
         ###  Optional parameter. Batch service endpoint. Alternatively, set by environment variable: AZURE_BATCH_ENDPOINT.  ### 
        'account-endpoint': "{{ item['account-endpoint'] | default('') }}" 
         ###  Optional parameter. Batch account key. Alternatively, set by environment variable: AZURE_BATCH_ACCESS_KEY.  ### 
        'account-key': "{{ item['account-key'] | default('') }}" 
         ###  Optional parameter. Batch account name. Alternatively, set by environment variable: AZURE_BATCH_ACCOUNT.  ### 
        'account-name': "{{ item['account-name'] | default('') }}" 
         ###  Optional parameter. A list of application packages to be installed on each compute node in the pool. Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. If this element is present, it replaces any existing application package references. If you specify an empty collection, then all application package references are removed from the pool. If omitted, any existing application package references are left unchanged. Space separated application IDs with optional version in 'id[#version]' format.  ### 
        'application-package-references': "{{ item['application-package-references'] | default('') }}" 
         ###  Optional parameter. A list of certificates to be installed on each compute node in the pool. If this element is present, it replaces any existing certificate references configured on the pool. If omitted, any existing certificate references are left unchanged. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory. Space separated certificate thumbprints.  ### 
        'certificate-references': "{{ item['certificate-references'] | default('') }}" 
         ###  Optional parameter. A list of name-value pairs associated with the pool as metadata. If this element is present, it replaces any existing metadata configured on the pool. If you specify an empty collection, any metadata is removed from the pool. If omitted, any existing metadata is left unchanged. Space separated values in 'key=value' format.  ### 
        'metadata': "{{ item['metadata'] | default('') }}" 
         ###  Optional parameter. The command line of the start task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.  ### 
        'start-task-command-line': "{{ item['start-task-command-line'] | default('') }}" 
         ###  Optional parameter. A list of environment variable settings for the start task. Space separated values in 'key=value' format.  ### 
        'start-task-environment-settings': "{{ item['start-task-environment-settings'] | default('') }}" 
         ###  Optional parameter. The maximum number of times the task may be retried. The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.  ### 
        'start-task-max-task-retry-count': "{{ item['start-task-max-task-retry-count'] | default('') }}" 
         ###  Optional parameter. A list of files that the Batch service will download to the compute node before running the command line. Files listed under this element are located in the task's working directory. Space separated resource references in filename=blobsource format.  ### 
        'start-task-resource-files': "{{ item['start-task-resource-files'] | default('') }}" 
         ###  Optional parameter. Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node. If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and failure info details. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false. Specify either 'true' or 'false' to update the property.  ### 
        'start-task-wait-for-success': "{{ item['start-task-wait-for-success'] | default('') }}" 
         ###  Optional parameter. An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.  ### 
        'if-match': "{{ item['if-match'] | default('') }}" 
         ###  Optional parameter. A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.  ### 
        'if-modified-since': "{{ item['if-modified-since'] | default('') }}" 
         ###  Optional parameter. An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.  ### 
        'if-none-match': "{{ item['if-none-match'] | default('') }}" 
         ###  Optional parameter. A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.  ### 
        'if-unmodified-since': "{{ item['if-unmodified-since'] | default('') }}" 
 - debug: msg="{{ az_batch_pool_set }}"          
 - name: "az batch pool set: Update the properties of a Batch pool. Updating a property in a subgroup will reset the unspecified properties of that group." 
   command: |                                      
     az batch pool set                            
                 --pool-id {{ az_batch_pool_set.input['pool-id'] }} 
                 {%if az_batch_pool_set.input['json-file'] %} --json-file az_batch_pool_set.input['json-file'] {%endif %} 
                 {%if az_batch_pool_set.input['account-endpoint'] %} --account-endpoint az_batch_pool_set.input['account-endpoint'] {%endif %} 
                 {%if az_batch_pool_set.input['account-key'] %} --account-key az_batch_pool_set.input['account-key'] {%endif %} 
                 {%if az_batch_pool_set.input['account-name'] %} --account-name az_batch_pool_set.input['account-name'] {%endif %} 
                 {%if az_batch_pool_set.input['application-package-references'] %} --application-package-references az_batch_pool_set.input['application-package-references'] {%endif %} 
                 {%if az_batch_pool_set.input['certificate-references'] %} --certificate-references az_batch_pool_set.input['certificate-references'] {%endif %} 
                 {%if az_batch_pool_set.input['metadata'] %} --metadata az_batch_pool_set.input['metadata'] {%endif %} 
                 {%if az_batch_pool_set.input['start-task-command-line'] %} --start-task-command-line az_batch_pool_set.input['start-task-command-line'] {%endif %} 
                 {%if az_batch_pool_set.input['start-task-environment-settings'] %} --start-task-environment-settings az_batch_pool_set.input['start-task-environment-settings'] {%endif %} 
                 {%if az_batch_pool_set.input['start-task-max-task-retry-count'] %} --start-task-max-task-retry-count az_batch_pool_set.input['start-task-max-task-retry-count'] {%endif %} 
                 {%if az_batch_pool_set.input['start-task-resource-files'] %} --start-task-resource-files az_batch_pool_set.input['start-task-resource-files'] {%endif %} 
                 {%if az_batch_pool_set.input['start-task-wait-for-success'] %} --start-task-wait-for-success az_batch_pool_set.input['start-task-wait-for-success'] {%endif %} 
                 {%if az_batch_pool_set.input['if-match'] %} --if-match az_batch_pool_set.input['if-match'] {%endif %} 
                 {%if az_batch_pool_set.input['if-modified-since'] %} --if-modified-since az_batch_pool_set.input['if-modified-since'] {%endif %} 
                 {%if az_batch_pool_set.input['if-none-match'] %} --if-none-match az_batch_pool_set.input['if-none-match'] {%endif %} 
                 {%if az_batch_pool_set.input['if-unmodified-since'] %} --if-unmodified-since az_batch_pool_set.input['if-unmodified-since'] {%endif %} 
   register: output  
 - set_fact: 
    az_batch_pool_set: "{{ az_batch_pool_set|combine({'output':output.stdout|from_json}) }}"  
 - debug: msg="{{ az_batch_pool_set }}" 
