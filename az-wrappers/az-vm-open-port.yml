

 - name: Set input params for az_vm_open_port
   set_fact: 
     az_vm_open_port:
       input: 
         ###  Required parameter. The name of the virtual machine to open inbound traffic on.  ### 
        'name': "{{ item['name'] | default('') }}" 
         ###  Required parameter. The port or port range (ex: 80-100) to open inbound traffic to. Use '*' to allow traffic to all ports.  ### 
        'port': "{{ item['port'] | default('') }}" 
         ###  Required parameter. Name of resource group. You can configure the default group using `az configure --defaults group=&lt;name&gt;`.  ### 
        'resource-group': "{{ item['resource-group'] | default('') }}" 
         ###  Optional parameter. Allow inbound traffic on the subnet instead of the NIC.  ### 
        'apply-to-subnet': "{{ item['apply-to-subnet'] | default('') }}" 
         ###  Optional parameter. The name of the network security group to create if one does not exist. Ignored if an NSG already exists.  ### 
        'nsg-name': "{{ item['nsg-name'] | default('') }}" 
         ###  Optional parameter. Rule priority, between 100 (highest priority) and 4096 (lowest priority). Must be unique for each rule in the collection.  ### 
        'priority': "{{ item['priority'] | default('') }}" 
 - debug: msg="{{ az_vm_open_port }}"          
 - name: "az vm open-port: Opens a VM to inbound traffic on specified ports." 
   command: |                                      
     az vm open-port                            
                 --name {{ az_vm_open_port.input['name'] }} 
                 --port {{ az_vm_open_port.input['port'] }} 
                 --resource-group {{ az_vm_open_port.input['resource-group'] }} 
                 {%if az_vm_open_port.input['apply-to-subnet'] %} --apply-to-subnet az_vm_open_port.input['apply-to-subnet'] {%endif %} 
                 {%if az_vm_open_port.input['nsg-name'] %} --nsg-name az_vm_open_port.input['nsg-name'] {%endif %} 
                 {%if az_vm_open_port.input['priority'] %} --priority az_vm_open_port.input['priority'] {%endif %} 
   register: output  
 - set_fact: 
    az_vm_open_port: "{{ az_vm_open_port|combine({'output':output.stdout|from_json}) }}"  
 - debug: msg="{{ az_vm_open_port }}" 
