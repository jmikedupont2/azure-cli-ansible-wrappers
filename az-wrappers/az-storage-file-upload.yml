

 - name: Set input params for az_storage_file_upload
   set_fact: 
     az_storage_file_upload:
       input: 
         ###  Required parameter. The file share name.  ### 
        'share-name': "{{ item['share-name'] | default('') }}" 
         ###  Required parameter. Path of the local file to upload as the file content.  ### 
        'source': "{{ item['source'] | default('') }}" 
         ###  Optional parameter. The cache control string.  ### 
        'content-cache-control': "{{ item['content-cache-control'] | default('') }}" 
         ###  Optional parameter. Conveys additional information about how to process the response payload, and can also be used to attach additional metadata.  ### 
        'content-disposition': "{{ item['content-disposition'] | default('') }}" 
         ###  Optional parameter. The content encoding type.  ### 
        'content-encoding': "{{ item['content-encoding'] | default('') }}" 
         ###  Optional parameter. The content language.  ### 
        'content-language': "{{ item['content-language'] | default('') }}" 
         ###  Optional parameter. The content's MD5 hash.  ### 
        'content-md5': "{{ item['content-md5'] | default('') }}" 
         ###  Optional parameter. The content MIME type.  ### 
        'content-type': "{{ item['content-type'] | default('') }}" 
         ###  Optional parameter. Maximum number of parallel connections to use.  ### 
        'max-connections': "{{ item['max-connections'] | default('') }}" 
         ###  Optional parameter. Metadata in space-separated key=value pairs. This overwrites any existing metadata.  ### 
        'metadata': "{{ item['metadata'] | default('') }}" 
         ###  Optional parameter. The path to the file within the file share. If the file name is omitted, the source file name will be used.  ### 
        'path': "{{ item['path'] | default('') }}" 
         ###  Optional parameter. Request timeout in seconds. Applies to each call to the service.  ### 
        'timeout': "{{ item['timeout'] | default('') }}" 
         ###  Optional parameter. If true, calculates an MD5 hash for each range of the file. The storage service checks the hash of the content that has arrived with the hash that was sent. This is primarily valuable for detecting bitflips on the wire if using http instead of https as https (the default) will already validate. Note that this MD5 hash is not stored with the file.  ### 
        'validate-content': "{{ item['validate-content'] | default('') }}" 
         ###  Optional parameter. Storage account key. Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_KEY.  ### 
        'account-key': "{{ item['account-key'] | default('') }}" 
         ###  Optional parameter. Storage account name. Related environment variable: AZURE_STORAGE_ACCOUNT. Must be used in conjunction with either storage account key or a SAS token. If neither are present, the command will try to query the storage account key using the authenticated Azure account. If a large number of storage commands are executed the API quota may be hit.  ### 
        'account-name': "{{ item['account-name'] | default('') }}" 
         ###  Optional parameter. Storage account connection string. Environment variable: AZURE_STORAGE_CONNECTION_STRING.  ### 
        'connection-string': "{{ item['connection-string'] | default('') }}" 
         ###  Optional parameter. A Shared Access Signature (SAS). Must be used in conjunction with storage account name. Environment variable: AZURE_STORAGE_SAS_TOKEN.  ### 
        'sas-token': "{{ item['sas-token'] | default('') }}" 
 - debug: msg="{{ az_storage_file_upload }}"          
 - name: "az storage file upload: Upload a file to a share that uses the SMB 3.0 protocol." 
   command: |                                      
     az storage file upload                            
                 --share-name {{ az_storage_file_upload.input['share-name'] }} 
                 --source {{ az_storage_file_upload.input['source'] }} 
                 {%if az_storage_file_upload.input['content-cache-control'] %} --content-cache-control az_storage_file_upload.input['content-cache-control'] {%endif %} 
                 {%if az_storage_file_upload.input['content-disposition'] %} --content-disposition az_storage_file_upload.input['content-disposition'] {%endif %} 
                 {%if az_storage_file_upload.input['content-encoding'] %} --content-encoding az_storage_file_upload.input['content-encoding'] {%endif %} 
                 {%if az_storage_file_upload.input['content-language'] %} --content-language az_storage_file_upload.input['content-language'] {%endif %} 
                 {%if az_storage_file_upload.input['content-md5'] %} --content-md5 az_storage_file_upload.input['content-md5'] {%endif %} 
                 {%if az_storage_file_upload.input['content-type'] %} --content-type az_storage_file_upload.input['content-type'] {%endif %} 
                 {%if az_storage_file_upload.input['max-connections'] %} --max-connections az_storage_file_upload.input['max-connections'] {%endif %} 
                 {%if az_storage_file_upload.input['metadata'] %} --metadata az_storage_file_upload.input['metadata'] {%endif %} 
                 {%if az_storage_file_upload.input['path'] %} --path az_storage_file_upload.input['path'] {%endif %} 
                 {%if az_storage_file_upload.input['timeout'] %} --timeout az_storage_file_upload.input['timeout'] {%endif %} 
                 {%if az_storage_file_upload.input['validate-content'] %} --validate-content az_storage_file_upload.input['validate-content'] {%endif %} 
                 {%if az_storage_file_upload.input['account-key'] %} --account-key az_storage_file_upload.input['account-key'] {%endif %} 
                 {%if az_storage_file_upload.input['account-name'] %} --account-name az_storage_file_upload.input['account-name'] {%endif %} 
                 {%if az_storage_file_upload.input['connection-string'] %} --connection-string az_storage_file_upload.input['connection-string'] {%endif %} 
                 {%if az_storage_file_upload.input['sas-token'] %} --sas-token az_storage_file_upload.input['sas-token'] {%endif %} 
   register: output  
 - set_fact: 
    az_storage_file_upload: "{{ az_storage_file_upload|combine({'output':output.stdout|from_json}) }}"  
 - debug: msg="{{ az_storage_file_upload }}" 
