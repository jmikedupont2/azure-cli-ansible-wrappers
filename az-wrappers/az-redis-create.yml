

 - name: Set input params for az_redis_create
   set_fact: 
     az_redis_create:
       input: 
         ###  Required parameter. Location. You can configure the default location using `az configure --defaults location=&lt;location&gt;`.  ### 
        'location': "{{ item['location'] | default('') }}" 
         ###  Required parameter. The primary resource name.  ### 
        'name': "{{ item['name'] | default('') }}" 
         ###  Required parameter. Name of resource group. You can configure the default group using `az configure --defaults group=&lt;name&gt;`.  ### 
        'resource-group': "{{ item['resource-group'] | default('') }}" 
         ###  Required parameter. What type of redis cache to deploy. Valid values: (Basic, Standard, Premium).  ### 
        'sku': "{{ item['sku'] | default('') }}" 
         ###  Required parameter. Size of redis cache to deploy. Example : values for C family (C0, C1, C2, C3, C4, C5, C6). For P family (P1, P2, P3, P4).  ### 
        'vm-size': "{{ item['vm-size'] | default('') }}" 
         ###  Optional parameter. If the value is true, then the non-ssl redis server port (6379) will be enabled.  ### 
        'enable-non-ssl-port': "{{ item['enable-non-ssl-port'] | default('') }}" 
         ###  Optional parameter. All Redis Settings. Few possible keys rdb-backup-enabled, rdb-storage-connection-string, rdb-backup-frequency, maxmemory-delta, maxmemory-policy, notify-keyspace-events, maxmemory-samples, slowlog-log-slower-than, slowlog-max-len, list-max-ziplist-entries, list-max-ziplist-value, hash-max-ziplist-entries, hash-max-ziplist-value, set-max-intset-entries, zset-max-ziplist-entries, zset-max-ziplist-value etc.  ### 
        'redis-configuration': "{{ item['redis-configuration'] | default('') }}" 
         ###  Optional parameter. The number of shards to be created on a Premium Cluster Cache.  ### 
        'shard-count': "{{ item['shard-count'] | default('') }}" 
         ###  Optional parameter. Required when deploying a redis cache inside an existing Azure Virtual Network.  ### 
        'static-ip': "{{ item['static-ip'] | default('') }}" 
         ###  Optional parameter. The full resource ID of a subnet in a virtual network to deploy the redis cache in. Example format /subscriptions/{subid}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1.  ### 
        'subnet-id': "{{ item['subnet-id'] | default('') }}" 
         ###  Optional parameter.   ### 
        'rtags': "{{ item['rtags'] | default('') }}" 
         ###  Optional parameter. Json dictionary with tenant settings.  ### 
        'tenant-settings': "{{ item['tenant-settings'] | default('') }}" 
 - debug: msg="{{ az_redis_create }}"          
 - name: "az redis create: Create new Redis Cache instance." 
   command: |                                      
     az redis create                            
                 --location {{ az_redis_create.input['location'] }} 
                 --name {{ az_redis_create.input['name'] }} 
                 --resource-group {{ az_redis_create.input['resource-group'] }} 
                 --sku {{ az_redis_create.input['sku'] }} 
                 --vm-size {{ az_redis_create.input['vm-size'] }} 
                 {%if az_redis_create.input['enable-non-ssl-port'] %} --enable-non-ssl-port az_redis_create.input['enable-non-ssl-port'] {%endif %} 
                 {%if az_redis_create.input['redis-configuration'] %} --redis-configuration az_redis_create.input['redis-configuration'] {%endif %} 
                 {%if az_redis_create.input['shard-count'] %} --shard-count az_redis_create.input['shard-count'] {%endif %} 
                 {%if az_redis_create.input['static-ip'] %} --static-ip az_redis_create.input['static-ip'] {%endif %} 
                 {%if az_redis_create.input['subnet-id'] %} --subnet-id az_redis_create.input['subnet-id'] {%endif %} 
                 {%if az_redis_create.input['rtags'] %} --tags az_redis_create.input['rtags'] {%endif %} 
                 {%if az_redis_create.input['tenant-settings'] %} --tenant-settings az_redis_create.input['tenant-settings'] {%endif %} 
   register: output  
 - set_fact: 
    az_redis_create: "{{ az_redis_create|combine({'output':output.stdout|from_json}) }}"  
 - debug: msg="{{ az_redis_create }}" 
